# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: epfl-chatbot
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epfl-chatbot-redis
  namespace: epfl-chatbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: epfl-chatbot-redis
  template:
    metadata:
      labels:
        app: epfl-chatbot-redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
            ephemeral-storage: "500Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
            ephemeral-storage: "1Gi"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir:
          sizeLimit: 1Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: epfl-chatbot-redis
  namespace: epfl-chatbot
spec:
  selector:
    app: epfl-chatbot-redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epfl-chatbot-compose-backend
  namespace: epfl-chatbot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: epfl-chatbot-compose-backend
  template:
    metadata:
      labels:
        app: epfl-chatbot-compose-backend
    spec:
      containers:
      - name: epfl-chatbot-compose-backend
        image: ic-registry.epfl.ch/mr-pezeu/epfl-chatbot-compose-backend
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        env:
        - name: REDIS_HOST
          value: "epfl-chatbot-redis"
        - name: REDIS_PORT
          value: "6379"
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
            ephemeral-storage: "4Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
            ephemeral-storage: "6Gi"

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: epfl-chatbot-backend-service-compose
  namespace: epfl-chatbot
spec:
  type: NodePort
  sessionAffinity: ClientIP
  selector:
    app: epfl-chatbot-compose-backend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: epfl-chatbot-compose-frontend
  namespace: epfl-chatbot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: epfl-chatbot-compose-frontend
  template:
    metadata:
      labels:
        app: epfl-chatbot-compose-frontend
    spec:
      containers:
      - name: epfl-chatbot-compose-frontend
        image: ic-registry.epfl.ch/mr-pezeu/epfl-chatbot-compose-frontend
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_BACKEND_URL
          value: "http://epfl-chatbot-backend-service-compose:8000"
        - name: BACKEND_URL
          value: "http://epfl-chatbot-backend-service-compose:8000"
        - name: NODE_ENV
          value: "production"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: epfl-chatbot-frontend-service-compose
  namespace: epfl-chatbot
spec:
  type: NodePort
  sessionAffinity: ClientIP
  selector:
    app: epfl-chatbot-compose-frontend
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: epfl-chatbot-frontend-ingress
  namespace: epfl-chatbot
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "900m"
    # Sticky session configuration
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "CHATBOTSESSION"
    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "true"
spec:
  rules:
  - host: lex-chatbot.epfl.ch
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: epfl-chatbot-frontend-service-compose
            port:
              number: 80
---
